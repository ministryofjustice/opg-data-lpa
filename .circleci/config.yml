---
version: 2.1

parameters:
  run_pull_request:
    type: boolean
    default: true
  run_commit_to_master:
    type: boolean
    default: true
  run_verify_pact:
    type: boolean
    default: false
  consumerversion:
    type: string
    default: ""
  consumer:
    type: string
    default: ""

workflows:
  pull_request:
    when: << pipeline.parameters.run_pull_request >>
    jobs:
      - build_and_test:
          name: build and artifact
          filters: {branches:{ignore:[master]}}

      - terraform_preflight:
          name: terraform preflight checks
          requires: [build and artifact]
          filters: {branches:{ignore:[master]}}

      - terraform_action:
          name: apply branch environment
          requires: [terraform preflight checks]
          tf_command: apply
          filters: {branches:{ignore:[master]}}

      - thing_to_cancel:
          name: thing to cancel
          filters: {branches:{ignore:[master]}}

      - cleanup:
          name: approve destroy environment
          type: approval
          requires: [apply branch environment]
          filters: {branches:{ignore:[master]}}

      - terraform_action:
          name: destroy branch environment
          requires: [approve destroy environment]
          tf_command: destroy
          filters: {branches:{ignore:[master]}}

  commit_to_master:
    when: << pipeline.parameters.run_commit_to_master >>
    jobs:
      - build_and_test:
          name: build and artifact
          filters: {branches:{only:[master]}}

      - terraform_action:
          name: development apply
          requires: [build and artifact]
          tf_command: apply --auto-approve
          tf_workspace: development
          filters: {branches:{only:[master]}}

      - terraform_action:
         name: preprod apply
         requires: [development apply]
         tf_command: apply --auto-approve
         tf_workspace: preproduction
         filters: {branches:{only:[master]}}

      - approve:
         name: approve release to production
         type: approval
         requires: [preprod apply]
         filters: {branches:{only:[master]}}

      - terraform_action:
          name: integration apply
          requires: [approve release to production]
          tf_command: apply --auto-approve
          tf_workspace: integration
          filters: {branches:{only:[master]}}

      - terraform_action:
          name: integration apply
          requires: [approve release to production]
          tf_command: apply --auto-approve
          tf_workspace: integration
          filters: {branches:{only:[master]}}

      - terraform_action:
         name: production apply
         requires: [approve release to production]
         tf_command: apply --auto-approve
         tf_workspace: production
         filters: {branches:{only:[master]}}
         pact_tag_production: true

  verify_pact:
    when: << pipeline.parameters.run_verify_pact >>
    jobs:
      - pact_verification:
          name: verify the latest pact

orbs:
  lpa-data:
    executors:
      python_with_tfvars:
        docker:
          - image: circleci/python:3
        resource_class: small
        environment:
          TF_CLI_ARGS_plan: -input=false -lock=false
          TF_CLI_ARGS_apply: -input=false -auto-approve
          TF_CLI_ARGS_destroy: -input=false -auto-approve
          TF_CLI_ARGS_init: -input=false -upgrade=true -reconfigure
          TF_VAR_default_role: sirius-ci
          TF_VERSION: 0.12.26
          TF_SHA256SUM: 607bc802b1c6c2a5e62cc48640f38aaa64bef1501b46f0ae4829feb51594b257
      python:
        docker:
          - image: circleci/python:3.8.1
    commands:
      terraform_install:
        steps:
          - run:
              name: Download Terraform
              command: curl -sfSO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
          - run:
              name: Add Terraform SHA256SUM
              command: echo "${TF_SHA256SUM} terraform_${TF_VERSION}_linux_amd64.zip" > SHA256SUMS
          - run:
              name: Check Terraform SHA256SUM
              command: sha256sum -c --status SHA256SUMS
          - run:
              name: Install Terraform
              command: sudo unzip terraform_${TF_VERSION}_linux_amd64.zip -d /bin
      aws_cli_install:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli --upgrade --user
      pact_install:
        steps:
          - run:
              name: Set up ready for pact tests
              command: |
                wget https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v1.82.3/pact-1.82.3-linux-x86_64.tar.gz
                tar xzf pact-1.82.3-linux-x86_64.tar.gz
              working_directory: ~/project
      login_codeartifact:
        steps:
          - run:
              name: install aws cli
              command: |
                pip3 install awscli --upgrade --user
          - run:
              name: login to code artifact for pip
              command: ./login_code_artifact.sh -a 288342028542 -t pip
              working_directory: ~/project/docs/ci_scripts
      cancel_redundant_builds:
        steps:
          - run:
              name: install cancel build requirements
              command: pip3 install -r requirements.txt
              working_directory: ~/project/docs/ci_scripts
          - run:
              name: cancel previous builds
              command: |
                python3 cancel_builds.py \
                --circle_project_username="${CIRCLE_PROJECT_USERNAME}" \
                --circle_project_reponame="${CIRCLE_PROJECT_REPONAME}" \
                --circle_branch="${CIRCLE_BRANCH}" \
                --circle_builds_token="${CIRCLE_BUILDS_TOKEN}" \
                --terms_to_waitfor="apply,plan,terraform,destroy" \
                --prod_job_terms="production ,integration ,pact"
              working_directory: ~/project/docs/ci_scripts

jobs:
  build_and_test:
    executor: lpa-data/python
    resource_class: small
    steps:
      - checkout
      - lpa-data/login_codeartifact
      - lpa-data/cancel_redundant_builds

  terraform_preflight:
    executor: lpa-data/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
    working_directory: ~/project
    steps:
      - run:
          name: wait for 30 secs
          command: sleep 60

  terraform_action:
    executor: lpa-data/python_with_tfvars
    resource_class: small
    parameters:
      tf_workspace:
        description: terraform workspace
        type: string
        default: ""
      tf_command:
        description: terraform command
        default: plan
        type: string
      pact_tag_production:
        description: to tag the production commit
        type: boolean
        default: false
    environment:
      WORKSPACE: << parameters.tf_workspace >>
    working_directory: ~/project
    steps:
      - run:
          name: wait for 30 secs
          command: sleep 60

  thing_to_cancel:
    executor: lpa-data/python_with_tfvars
    resource_class: small
    steps:
      - run:
          name: wait for 30 secs
          command: sleep 61

  pact_verification:
    docker:
      # Primary container image where all the steps run.
      - image: circleci/python:3
    resource_class: small
    working_directory: ~/project
    parameters:
    environment:
      GIT_CONSUMER: << pipeline.parameters.consumer >>
      GIT_COMMIT_CONSUMER: << pipeline.parameters.consumerversion >>
    steps:
      - checkout
      - run:
          name: Set BASH_ENV
          command: ./set_env.sh >> $BASH_ENV
          working_directory: ~/project/.circleci
      - run:
          name: spin up mock rest api
          command: echo "Insert command to spin up env here"
          background: true
      - run:
          name: check mock env started correctly
          command: |
            sleep 3
            echo "Insert commands to check mock env running correctly here"
      - lpa-data/pact_install
      - lpa-data/login_codeartifact
      - run:
          name: install ci requirements
          command: pip3 install -r requirements.txt
          working_directory: ~/project/pact
      - run:
          name: verify pact
          command: |
            echo ${API_VERSION}
            python check_pact_deployable.py \
            --provider_base_url="http://localhost:4343" \
            --pact_broker_url="${PACT_BROKER_BASE_URL}" \
            --broker_user_name="admin" \
            --broker_secret_name="pactbroker_admin" \
            --consumer_pacticipant="${PACT_CONSUMER}" \
            --provider_pacticipant="${PACT_PROVIDER}" \
            --api_version="${API_VERSION}" \
            --git_commit_consumer="${GIT_COMMIT_CONSUMER}" \
            --git_commit_provider="${GIT_COMMIT_PROVIDER}" || echo "Failed but because consumer pacts not set up yet"
          working_directory: ~/project/pact
